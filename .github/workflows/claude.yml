name: Run Claude Code

on:
  workflow_dispatch:  # Manually trigger from Actions tab

jobs:
  run-claude:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create MCP Config
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json <<'EOF'
          {
            "mcpServers": {
              "cospec": {
                "httpUrl": "https://sit.cospec.ai/mcp?deploymentId=50b9cf59-4b55-4516-a6e1-9077a6070640",
                "headers": {
                  "x-auth-header": "${{ secrets.COSPEC_API_TOKEN }}",
                  "Content-Type": "application/json"
                },
                "timeout": 5000
              }
            }
          }
          EOF

      - name: Create Prompt File
        run: |
          mkdir -p /tmp/claude-prompts
          cat > /tmp/claude-prompts/task-prompt.txt <<'EOF'
          NOTE: When using newly added tools, you must use the cospec_execute_tool with the new tool name as a param! :)

          We'd like you to register tools using the cospec tools first!!

          Register tools for airtable, discover the github issues on there, find the slack message and reply to the thread with hello.

          In that order thanks xoxo
          EOF

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: /tmp/claude-prompts/task-prompt.txt
          model: claude-3-5-sonnet-20241022
          claude_args: |
            --mcp-config /tmp/mcp-config/mcp-servers.json
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Display Error JSON Files
        if: always()
        run: |
          echo "### Error Details" >> $GITHUB_STEP_SUMMARY
          ERROR_FILES=$(find /tmp -name "claude-error-*.json" 2>/dev/null || true)
          if [ -n "$ERROR_FILES" ]; then
            for file in $ERROR_FILES; do
              echo "#### Error from: $file" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              cat "$file" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Full error file content:"
              cat "$file"
            done
          else
            echo "No error files found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Display Claude Response
        if: always()
        run: |
          echo "### Claude Response" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.claude.outputs.response }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Display Errors
        if: always()
        run: |
          echo "### Claude Errors (stderr)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.claude.outputs.errors }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-logs
          path: |
            claude-artifacts/
            /tmp/claude-error-*.json
          if-no-files-found: warn
